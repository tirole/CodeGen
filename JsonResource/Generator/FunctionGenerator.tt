<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#  var info = Info.FunctionInfo; 
    var stringAfterArgument = "";
    if(info.StringAfterArgument != "")
    {
        stringAfterArgument = " " + info.StringAfterArgument;
    }
#>
<#if(info.IsInline) {#>
inline
<#} #>
<#if(Info.IsDeclaration) {#>
<#=info.ReturnType #> <#=info.FunctionName #>(<#  
        for(int i = 0; i < info.ArgumentInfos.Count; ++ i) { 
            string typeString = "";
            var variableInfo = info.ArgumentInfos[i];
            if(variableInfo.TypePrefix != null && variableInfo.TypePrefix != "")
            {
                typeString += variableInfo.TypePrefix + " ";
            }
            typeString += variableInfo.Type;
            if(variableInfo.TypeSuffix != null && variableInfo.TypeSuffix != "")
            {
                typeString += variableInfo.TypeSuffix;
            }
#>
<#=typeString #> <#=variableInfo.VariableName #><#
            if(i != info.ArgumentInfos.Count - 1) { #>
, 
<#} #>
<#        } #>)<#=stringAfterArgument #>;
<#    } else { #>
<#=info.ReturnType #> <#=info.FunctionName #>(<#  
        for(int i = 0; i < info.ArgumentInfos.Count; ++ i) { 
            string typeString = "";
            var variableInfo = info.ArgumentInfos[i];
            if(i != 0)
            {
                typeString += "\t";
            }
            if(variableInfo.TypePrefix != null && variableInfo.TypePrefix != "")
            {
                typeString += variableInfo.TypePrefix + " ";
            }
            typeString += variableInfo.Type;
            if(variableInfo.TypeSuffix != null && variableInfo.TypeSuffix != "")
            {
                typeString += variableInfo.TypeSuffix;
            }
#>
<#=typeString #> <#=variableInfo.VariableName #><#
            if(i != info.ArgumentInfos.Count - 1) { #>
, 
<#} #>
<#        } #>)<#=stringAfterArgument #>
{
}
<#    } #>