<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    string constructorArg = "";
    string argument = "";
    string opCodeVal = "";
    const string cmdDataVariable = "this->data";

    for(int i = 0; i < Info.MemberVariableInfos.Count; ++i)
    {
        var member = Info.MemberVariableInfos[i];

        string inputVariableName = member.VariableName;

        if(i != 0)
        {
            constructorArg += " | ";
        }
        // opcode
        if(member.BitBegin == 56)
        {
            var reqInfo = member.RequirementInfos[0];
            string val = "(" + 
                "static_cast<uint64_t>(" +
                reqInfo.Values[0] + ")" +
                " << " + member.BitBegin + ")";
            constructorArg += val;
            opCodeVal = val;
        }
        else
        {
            string val = "(" + 
                "static_cast<uint64_t>(" +
                inputVariableName + ")" +
                " << " + member.BitBegin + ")";
            constructorArg += val;

            argument += member.Type + " " + member.VariableName;

            if(Info.MemberVariableInfos[i + 1].BitBegin != 56)
            {
                argument += ", ";
            }
        }
    }
 #>
class <#=        Info.Name #> : public CommandBase
{
    constexpr <#=        Info.Name #>() :
        CommandBase(<#=        opCodeVal #>)
    {
    }
    constexpr <#=        Info.Name #>(<#=        argument #>) :
        CommandBase(<#=        constructorArg #>)
    {
    }
<#    foreach(var member in Info.MemberVariableInfos) { 
        string functionNameSuffix = char.ToUpper(member.VariableName[0]) + member.VariableName.Substring(1);
        string inputType = member.Type;
        string inputVariableName = member.VariableName;
        int bitCount = member.BitEnd - member.BitBegin + 1;
        ulong mask = (((ulong)1 << bitCount) - 1) << member.BitBegin;
        string maskStr = "0x" + mask.ToString("X");
#>
    <#=            Info.Name #>& Set<#=            functionNameSuffix #>(<#=            inputType #> val)
    {
<#        if(member.RequirementInfos != null) { #>
<#            foreach(var info in member.RequirementInfos) { #>
<#                if(info.Type != RequirementInfo.RequirementType.NoRequirement) { #>
        <#=                        info.GetString("val") #>
<#                } #>
<#            } #>
<#        } #>
        <#=cmdDataVariable #> &= <#=maskStr #>;
        <#=cmdDataVariable #> |= static_cast<uint64_t>(val) <<<#=member.BitBegin #>;
        return *this;
    }
<#    } #>
};